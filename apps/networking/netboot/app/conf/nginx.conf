lua_package_path "/lua/?.lua;;";

server {
    listen 80;
    server_name localhost;

    location / {
        root /media;
        autoindex on;
    }

    location /configure {
        content_by_lua_block {
            local args = ngx.req.get_uri_args()
            local system = args.system or "unknown"
            local arch = args.arch or "x64"

            -- Set headers for file download
            ngx.header["Content-Disposition"] = 'attachment; filename="configure.bat"'
            ngx.header["Content-Type"] = "text/plain"

            -- Send response
            ngx.print("@echo off\r\nWpeutil InitializeNetwork\r\n:START\r\nping -n 1 homeserver\r\nif errorlevel 1 GOTO START\r\nnet use m: \\\\homeserver.local\\WindowsISOs /user:guest\r\nm:\\" .. system .. "\\" .. arch .. "\\setup.exe")
        }
    }

    location /winpeshl {
        content_by_lua_block {
            -- Set headers for file download
            ngx.header["Content-Disposition"] = 'attachment; filename="winpeshl.ini"'
            ngx.header["Content-Type"] = "text/plain"

            -- Send response
            ngx.print("[LaunchApp]\r\nAppPath = configure.bat")
        }
    }

    location /custom.ipxe {
        content_by_lua_block {
            local template_path = "/templates/custom.ipxe"
            local media_dir = "/media/"

            local template_file = io.open(template_path, "r")
            if not template_file then
                ngx.say("Err: unable to open template file")
                return
            end

            local template_content = template_file:read("*a")
            template_file:close()
            if not template_content then
                ngx.say("Err: unable to read template file")
                return
            end

            local handle = io.popen("find " .. media_dir .. " -maxdepth 1 -type d -exec basename {} \\; | grep -v '^$' | grep -v '^WinPE$' | grep -v '^media$'")
            if not handle then
                ngx.say("Err: unable to get folder list")
                return
            end

            local windows_versions = {}
            for line in handle:lines() do
                local name = line:gsub("_", " ")
                table.insert(windows_versions, "item " .. line .. " " .. name)
            end
            handle:close()

            local keys = {}
            for name, key in pairs(require "keys") do
                table.insert(keys, "item " .. key .. name)
            end
            template_content = template_content:gsub("{{WINVERSIONS}}", table.concat(windows_versions, "\n"))
            template_content = template_content:gsub("{{UNATTENDED_KEYS}}", table.concat(keys, "\n"))

            ngx.print(template_content)
        }
    }

    location /unattended {
        content_by_lua_block {
            local args = ngx.req.get_uri_args()
            local key = args.key or "Ask for Key"
            local template_path = "/templates/autounattend.xml"

            local template_file = io.open(template_path, "r")
            if not template_file then
                ngx.say("Err: unable to open template file")
                return
            end

            local template_content = template_file:read("*a")
            template_file:close()
            if not template_content then
                ngx.say("Err: unable to read template file")
                return
            end

            local keyxml = ""
            if key ~= nil and key ~= "" then
                keyxml = "<ProductKey><Key>" .. key .. "</Key><WillShowUI>OnError</WillShowUI></ProductKey>"
            end

            ngx.print(template_content:gsub("{{KEY}}", keyxml))
        }
    }
}
