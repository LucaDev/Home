---
data_dir: /vector-data-dir

api:
  enabled: true
  address: 0.0.0.0:8686


## GeoIP

enrichment_tables:
  geoip_table:
    type: geoip
    path: /usr/share/GeoIP/GeoLite2-City.mmdb


## Sources

sources:
  syslog:
    type: syslog
    address: 0.0.0.0:1514
    mode: tcp
  edgeos_source:
    type: syslog
    address: 0.0.0.0:514
    mode: udp
  journal_logs:
    type: journald
    journal_directory: /var/log/journal
  kubernetes_logs:
    type: kubernetes_logs
    pod_annotation_fields:
      container_image: "container_image"
      container_name: "container_name"
      pod_annotations: "pod_annotations"
      pod_labels: "pod_labels"
      pod_name: "pod_name"
    namespace_annotation_fields:
      namespace_labels: ""
    node_annotation_fields:
      node_labels: ""
    use_apiserver_cache: true
  vector_metrics:
    type: internal_metrics


## Transforms

transforms:
  kubernetes_remap:
    type: remap
    inputs:
      - kubernetes_logs
    source: |
      # Standardize 'app' index
      .custom_app_name = .pod_labels."app.kubernetes.io/name" || .pod_labels.app || .pod_labels."k8s-app" || "unknown"
      # Drop pod_labels
      del(.pod_labels)
  edgeos_firewall_route:
    type: route
    inputs: ["edgeos_source"]
    route:
      firewall: |
        .facility == "kern" && match!(.message, r'^\[(.*?)\].(.*)')
  edgeos_firewall_remap:
    type: remap
    inputs: ["edgeos_firewall_route.firewall"]
    source: |
      # Parse firewall rule message
      split_message, split_err = parse_regex(.message, r'^\[.*\].\[(?P<rule>.*?)\](?P<fields>.*)')
      if split_err != null {
          abort
      }
      # Extract separate fields from message
      split_message.fields, split_err = strip_whitespace(split_message.fields)
      if split_err != null {
          abort
      }
      .message, parse_err = parse_key_value(split_message.fields, whitespace: "strict")
      if parse_err != null {
          abort
      }
      # Add more information about the triggered rule
      .message.RULE, parse_err = parse_regex(split_message.rule, r'^ipv4-(?P<from_zone>\w+)-(?P<to_zone>\w+)-(?P<id>\w+)-(?P<action>\w+)$')
      if parse_err != null {
          abort
      }
  edgeos_firewall_wan_route:
    type: route
    inputs: ["edgeos_firewall_remap"]
    route:
      from_wan: .message.RULE.from_zone == "wan"
  edgeos_firewall_geoip_remap:
    type: remap
    inputs: ["edgeos_firewall_wan_route.from_wan"]
    source: |
      .geoip = get_enrichment_table_record!(
          "geoip_table", {
              "ip": .message.SRC
          }
      )

## Sinks

sinks:
  loki_syslog:
    type: loki
    inputs:
      - journal_logs
      - syslog
    endpoint: http://loki.monitoring.svc.cluster.local:3100
    encoding: { codec: json }
    batch:
      max_bytes: 2049000
    out_of_order_action: rewrite_timestamp
    remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'
  loki_edgeos:
    inputs: ["edgeos_source", "edgeos_firewall_geoip_remap"]
    type: loki
    endpoint: http://loki.monitoring.svc.cluster.local:3100
    encoding: { codec: json }
    out_of_order_action: rewrite_timestamp
    remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'
  loki_kubernetes:
    type: loki
    inputs:
      - kubernetes_remap
    endpoint: http://loki.monitoring.svc.cluster.local:3100
    encoding: { codec: json }
    batch:
      max_bytes: 2049000
    out_of_order_action: rewrite_timestamp
    remove_label_fields: true
    remove_timestamp: true
    labels:
      app: '{{ custom_app_name }}'
      namespace: '{{ kubernetes.pod_namespace }}'
      node: '{{ kubernetes.pod_node_name }}'
  prom_exporter:
    type: prometheus_exporter
    inputs:
      - vector_metrics
    address: 0.0.0.0:9090
