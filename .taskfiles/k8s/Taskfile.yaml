---
version: "3"

tasks:
  mount:
    desc: Mount a PersistentVolumeClaim to a pod temporarily
    interactive: true
    vars:
      claim: '{{ or .claim (fail "PersistentVolumeClaim `claim` is required") }}'
      namespace: '{{.namespace | default "default"}}'
    cmds:
      - |
        kubectl run -n {{.namespace}} debug-{{.claim}} -i --tty --rm --image=null --privileged --overrides='
          {
            "apiVersion": "v1",
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "ghcr.io/onedr0p/alpine:rolling",
                  "command": [
                    "/bin/bash"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "volumeMounts": [
                    {
                      "name": "config",
                      "mountPath": "/data/config"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "config",
                  "persistentVolumeClaim": {
                    "claimName": "{{.claim}}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'
    preconditions:
      - kubectl -n {{.namespace}} get pvc {{.claim}}

  debug:
    desc: Debugs a container with an ephermemal one
    interactive: true
    vars:
      pod: '{{ or .pod (fail "`pod` is required") }}'
      namespace: '{{.namespace | default "default"}}'
    cmds:
      # ToDo: optimize
      - zsh ephermeral-container.sh {{.pod}} main {{.namespace}}
    preconditions:
      - kubectl -n {{.namespace}} get pod {{.pod}}

  cleanup-pods:
    desc: Clean up leftover Pods
    cmds:
      - for:
          matrix:
            PHASE: [Failed, Succeeded, Pending]
        cmd: kubectl delete pods --field-selector status.phase={{.ITEM.PHASE}} -A --ignore-not-found=true

  sync-externalsecret:
    desc: Sync ExternalSecret resource
    summary: |
      Args:
        NS: Namespace the PVC is in (default: default)
        NAME: ExternalSecret to sync (default: all secrets)
    silent: true
    vars:
      NS: '{{.NS | default "default"}}'
      NAME: '{{ .NAME | default "" }}'
    cmds:
      - |
        {{if eq .NAME ""}}
        kubectl get externalsecret.external-secrets.io --all-namespaces --no-headers -A | awk '{print $1, $2}' \
          | xargs --max-procs=2 -l bash -c 'kubectl --namespace $0 annotate externalsecret.external-secrets.io $1 force-sync=$(date +%s) --overwrite'
        {{else}}
        kubectl --namespace {{.NS}} annotate externalsecret.external-secrets.io {{.NAME}} force-sync=$(date +%s) --overwrite
        {{end}}
    preconditions:
      - sh: '{{if ne .NAME ""}}kubectl --namespace {{.NS}} get externalsecret {{.NAME}}{{end}}'
        msg: "ExternalSecret {{.NAME}} not found in namespace {{.NS}}"
